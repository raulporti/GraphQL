 type Cliente {
       id: ID
       nombre: String
       apellido: String
       empresa: String
       emails: [Email]
       edad: Int
       tipo: TipoCliente
   }

   type Producto {
       id: ID
       nombre: String
       precio: Float
       stock: Int 
   }
   type Email {
       email: String
   }
   input EmailInput {
       email: String
   }

    type Pedido {
       id: ID
       pedido: [PedidoProducto]
       total: Int
       fecha: String
       cliente: ID
       estado: EstadoPedido
       vendedor : ID
   }
   type PedidoProducto {
      id: ID
      cantidad: Int 
   }

   type ClienteTotal {
        total: Float
        cliente : [Cliente]    
   }
   type VendedorTotal {
       total: Float
       vendedor : [Usuario]
   }
   type Token {
       token: String!
   }
   type Usuario {
    usuario: String
    id: ID
    nombre: String
    rol: String
   }

   """Asigna la categoria del cliente"""
   enum TipoCliente {
       BASICO
       PREMIUM
   }
   enum EstadoPedido {
       PENDIENTE
       COMPLETADO
       CANCELADO
   }
   type Query {
       getClientes(limite: Int, offset: Int, vendedor: String): [Cliente]
       getCliente(id: ID): Cliente
       totalClientes(vendedor: String) : String

       #Productos
       obtenerProductos(limite: Int, offset: Int, stock: Boolean) : [Producto]
       obtenerProducto(id: ID!): Producto
       totalProductos : String

       #Pedidos
       obtenerPedidos(cliente: String) : [Pedido]

       #graficas
       topClientes : [ClienteTotal]
       topVendedores: [VendedorTotal] 
       #Usuarios
       obtenerUsuario : Usuario
       getUsuario(id: ID!) : Usuario
       obtenerUsuarios: [Usuario]
   }
   """Campos para los Clientes Nuevos"""
   input ClienteInput {
    id: ID
    nombre: String!
    apellido: String!
    empresa: String!
    emails: [EmailInput]
    edad: Int!
    tipo: TipoCliente!
    pedidos: [PedidoInput]
    vendedor: ID
   }

   input ProductoInput {
       id: ID
       nombre: String!
       precio: Float!
       stock: Int!
   }

   input PedidoInput {
       id: ID
       pedido: [PedidoProductoInput]
       total: Int
       fecha: String
       cliente: ID
       estado: EstadoPedido
       vendedor: ID
   }
   input PedidoProductoInput {
      id: ID
      cantidad: Int 
   }
   """Mutation  para crear nuevos clientes"""
   type Mutation {
       #nombre del resolver, Input con Datos y valor que retorna 
       #"""Permite Crear Nuevos Clientes"""
       crearCliente(input: ClienteInput) : Cliente
       actualizarCliente(input: ClienteInput) : Cliente
       eliminarCliente(id: ID) : String
       #Productos
       nuevoProducto(input: ProductoInput): Producto
       actualizarProducto(input: ProductoInput): Producto
       eliminarProducto(id: ID) : String
       #Pedidos
       nuevoPedido(input: PedidoInput): Pedido
       actualizarEstado(input: PedidoInput): String

        #Usuarios
        crearUsuario(usuario: String!, nombre: String!, rol: String!, password: String!): String
        autenticarUsuario(usuario: String!, password: String!) : Token
        eliminarUsuario(id: ID): String
   }